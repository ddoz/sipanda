// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String
  password   String
  level      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Artikel    Artikel[]
  HargaPasar HargaPasar[]

  @@map("user")
}

model Slider {
  id        Int      @id @default(autoincrement())
  text      String?
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("slider")
}

model Site {
  id                 Int      @id @default(autoincrement())
  sejarah            String?  @db.LongText
  visiMisi           String?  @db.LongText
  tugasDanFungsi     String?  @db.LongText
  strukturOrganisasi String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("site")
}

enum TypeGallery {
  IMAGE
  VIDEO
}

model Gallery {
  id        Int         @id @default(autoincrement())
  title     String
  file      String?
  type      TypeGallery
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("gallery")
}

model Pengumuman {
  id        Int      @id @default(autoincrement())
  judul     String
  isi       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pengumuman")
}

model KategoriArtikel {
  id           Int       @id @default(autoincrement())
  namaKategori String
  Artikel      Artikel[]

  @@map("kategoriartikel")
}

model Artikel {
  id                Int             @id @default(autoincrement())
  judul             String
  isi               String?         @db.LongText
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  thumbnail         String?
  slug              String
  kategoriArtikel   KategoriArtikel @relation(fields: [kategoriArtikelId], references: [id])
  kategoriArtikelId Int
  counterView       Int             @default(0)
  isPublish         Boolean
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("artikel")
}

model KategoriDokumen {
  id           Int       @id @default(autoincrement())
  namaKategori String
  Dokumen      Dokumen[]

  @@map("kategoridokumen")
}

model Dokumen {
  id                Int             @id @default(autoincrement())
  judul             String
  keterangan        String?
  fileDokumen       String
  kategoriDokumen   KategoriDokumen @relation(fields: [kategoriDokumenId], references: [id])
  kategoriDokumenId Int
  isPublish         Boolean
  counterView       Int             @default(0)
  counterDownload   Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("dokumen")
}

model Media {
  id        Int      @id @default(autoincrement())
  judul     String?
  fileName  String
  fileType  String
  tag       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media")
}

model KategoriPangan {
  id        Int      @id @default(autoincrement())
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Pangan    Pangan[]

  @@map("kategoripangan")
}

model Pangan {
  id               Int            @id @default(autoincrement())
  namaPangan       String
  satuan           String?
  kategoriPangan   KategoriPangan @relation(fields: [kategoriPanganId], references: [id])
  kategoriPanganId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  HargaPasar       HargaPasar[]

  @@map("pangan")
}

model Pasar {
  id         Int          @id @default(autoincrement())
  nama       String
  latitude   String?
  longitude  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  HargaPasar HargaPasar[]

  @@map("pasar")
}

enum TipeHarga {
  NAIK
  STABIL
  TURUN
}

model HargaPasar {
  id         Int       @id @default(autoincrement())
  tanggal    String
  pangan     Pangan    @relation(fields: [panganId], references: [id])
  pasar      Pasar     @relation(fields: [pasarId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  tipe       TipeHarga
  harga      Float
  panganId   Int
  pasarId    Int
  userId     Int
  persentase String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([panganId, pasarId, tanggal])
  @@map("hargapasar")
}

model KritikSaran {
  id        Int      @id @default(autoincrement())
  nilai     String
  saran     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kritik_saran")
}
